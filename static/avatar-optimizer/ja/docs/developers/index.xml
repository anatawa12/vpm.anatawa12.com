<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>開発者向け on Avatar Optimizer (1.8.13)</title><link>https://vpm.anatawa12.com/avatar-optimizer/ja/docs/developers/</link><description>Recent content in 開発者向け on Avatar Optimizer (1.8.13)</description><generator>Hugo</generator><language>ja</language><atom:link href="https://vpm.anatawa12.com/avatar-optimizer/ja/docs/developers/index.xml" rel="self" type="application/rss+xml"/><item><title>Asset Description</title><link>https://vpm.anatawa12.com/avatar-optimizer/ja/docs/developers/asset-description/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vpm.anatawa12.com/avatar-optimizer/ja/docs/developers/asset-description/</guid><description>&lt;h1 id="asset-description">
 Asset Description
 &lt;a class="anchor" href="#asset-description">#&lt;/a>
&lt;/h1>
&lt;p>Asset DescriptionはAvatar Optimizerにアセットの情報を提供するためのファイルです。&lt;/p>
&lt;h2 id="why-asset-description-is-needed">
 なぜAsset Descriptionが必要なのか
 &lt;a class="anchor" href="#why-asset-description-is-needed">#&lt;/a>
&lt;/h2>
&lt;p>Avatar Optimizerは、Asset Descriptionで提供された情報を用いて最適化の失敗を防ぎます。&lt;/p>
&lt;p>Asset Descriptionでは、以下の情報を提供することができます。&lt;/p>
&lt;ul>
&lt;li>Meaningless Components&lt;br>
Avatar Optimizerに無視されるべきコンポーネントを指定します。&lt;/li>
&lt;li>Parameters Read By External Tools&lt;br>
OSCツールなどの外部ツールから読み取られるパラメーターを指定します。&lt;/li>
&lt;li>Parameters Changed By External Tools&lt;br>
OSCツールなどの外部ツールから変更されるパラメーターを指定します。&lt;/li>
&lt;/ul>
&lt;p>各項目が必要な理由については以下の説明を参照してください。&lt;/p>
&lt;h3 id="why-meaningless-components">
 Meaningless Components
 &lt;a class="anchor" href="#why-meaningless-components">#&lt;/a>
&lt;/h3>
&lt;p>アバター上の不要な要素を削除するために、Avatar Optimizerはアバターに存在するすべてのコンポーネントのことを知る必要があります。&lt;br>
Avatar Optimizer v1.6.0で&lt;a href="../make-your-components-compatible-with-aao">コンポーネントにAAOとの互換性をもたせるためのドキュメント&lt;/a>とAPIが追加されましたが、
非破壊ツールでなく、ビルド時に処理を行わないようなツールでは、&lt;code>IVRCSDKPreprocessAvatarCallback&lt;/code>でコンポーネントを削除するのは少し面倒だろうと考えました。&lt;br>
そのため、Avatar Optimizerに無視してほしい、ビルド時やランタイムで処理を行わないコンポーネントを指定するためのシンプルな仕組みとして、Asset Descriptionがv1.7.0で追加されました。&lt;/p>
&lt;p>なお、非破壊ツールの場合については、正しくない実行順で処理が行われた場合にAvatar Optimizerがコンポーネントを誤って削除してしまわないように、従来通り&lt;code>IVRCSDKPreprocessAvatarCallback&lt;/code>やNDMFを使用してAvatar Optimizerの処理よりも先にコンポーネントを削除することを推奨します。&lt;/p>
&lt;h3 id="why-parameters-read-by-external-tools">
 Parameters Read By Extenral Tools
 &lt;a class="anchor" href="#why-parameters-read-by-external-tools">#&lt;/a>
&lt;/h3>
&lt;p>PhysBoneやContact Receiverのようなコンポーネントは、OSCツールで読み取り可能なパラメーターを生成します。
そのようなパラメーターは、Animator ControllerやExpression Parameterに登録しなくても、OSCツールから読み取り可能であることが知られています。&lt;br>
そのため、Avatar Optimizerはそれらのパラメーターが単に使用されていないものなのか、OSCツールで読み取るためのものなのかを判別することができません。
登録されていないパラメーターがOSCツールで使用されていることは比較的少ないため、コンポーネントが生成するパラメーターがアバター上で全く使われていない場合にはコンポーネントが削除されることになります。&lt;/p>
&lt;p>これを防ぐために、OSCツールから読み取られる目的のパラメーターをAsset Descriptionで指定することができます。&lt;/p>
&lt;h3 id="why-parameters-written-by-external-tools">
 Parameters Changed By External Tools
 &lt;a class="anchor" href="#why-parameters-written-by-external-tools">#&lt;/a>
&lt;/h3>
&lt;p>この情報は現在のAvatar Optimizerでは使用されていませんが、将来的に使用することが計画されています。&lt;/p></description></item><item><title>Component Scripting API</title><link>https://vpm.anatawa12.com/avatar-optimizer/ja/docs/developers/component-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vpm.anatawa12.com/avatar-optimizer/ja/docs/developers/component-api/</guid><description>&lt;h1 id="component-scripting-api">
 Component Scripting API
 &lt;a class="anchor" href="#component-scripting-api">#&lt;/a>
&lt;/h1>
&lt;p>Avatar Optimizer v1.7.0以降、アバターにAvatar Optimizerのコンポーネントを追加・設定するためのComponent APIを提供しています。
このAPIを使用することで、Avatar Optimizerのコンポーネントを追加するツールやコンポーネントを作成することができます。&lt;/p>
&lt;h2 id="supported-components">
 Component APIが利用可能なコンポーネント
 &lt;a class="anchor" href="#supported-components">#&lt;/a>
&lt;/h2>
&lt;p>現時点では、すべてのコンポーネントがComponent APIで利用出来るわけではありません。
Component APIが利用可能なコンポーネントの一覧は以下の通りです。&lt;/p>
&lt;ul>
&lt;li>&lt;code>RemoveMeshInBox&lt;/code> - コンポーネントの追加と追加時の設定変更がサポートされています&lt;/li>
&lt;li>&lt;code>RemoveMeshByBlendShape&lt;/code> - コンポーネントの追加と追加時の設定変更がサポートされています&lt;/li>
&lt;li>&lt;code>TraceAndOptimize&lt;/code> - デフォルト設定での追加はサポートされていますが、設定変更はサポートされていません&lt;/li>
&lt;/ul>
&lt;p>将来のバージョンで追加されるデフォルトで有効な機能との互換性を保つために、コンポーネントの設定変更を行う場合には注意が必要です。
詳細については以下のドキュメントを参照してください。&lt;/p>
&lt;h2 id="getting-started">
 はじめに
 &lt;a class="anchor" href="#getting-started">#&lt;/a>
&lt;/h2>
&lt;p>Component APIを使用するには、assembly definitionファイルで&lt;code>com.anatawa12.avatar-optimizer.runtime&lt;/code>を参照する必要があります。
Avatar Optimizerはランタイムで動作しないため、ランタイムビルド向けで&lt;code>com.anatawa12.avatar-optimizer.runtime&lt;/code>に依存してはいけません。&lt;br>
&lt;code>com.anatawa12.avatar-optimizer.runtime&lt;/code>にあるいくつかのクラスは、将来のバージョンでランタイム向けビルドから除外される可能性があります。
言い換えると、ランタイム向けのアセンブリで&lt;code>com.anatawa12.avatar-optimizer.runtime&lt;/code>を使用するのは避けることをお勧めします。エディタ向けのアセンブリでのみ使用するようにしてください。&lt;/p>
&lt;p>次に、コンポーネントの設定を変更する場合は、将来のバージョンで追加される機能との互換性を確保するために&lt;code>void Initialize(int version)&lt;/code>メソッドを呼び出す必要があります。
(&lt;a href="../../basic-concept/#behavior-stability">動作の安定性&lt;/a>で説明されているように、)デフォルト設定は変更される可能性があります。&lt;br>
デフォルト設定は、&lt;code>GameObject.AddComponent&amp;lt;T&amp;gt;()&lt;/code>メソッドで追加されるコンポーネントに影響します。
従って、Avatar Optimizerの将来のバージョンとの互換性を保つためには、使用するデフォルト設定のバージョンを指定して&lt;code>Initialize&lt;/code>メソッドを呼び出す必要があります。
デフォルト設定のバージョンは、&lt;code>Initialize&lt;/code>メソッドのドキュメントに記載されているはずです。&lt;/p>
&lt;blockquote class="book-hint warning">
&lt;p>&lt;code>Initialize&lt;/code>メソッドを呼び出さなかった場合、コンポーネントが予期しない動作をしたり、将来的にエラーが発生したりする可能性があります。&lt;/p>
&lt;/blockquote>
&lt;blockquote class="book-hint info">
&lt;p>コンポーネントの設定変更はコンポーネントを追加した直後に行う場合のみサポートされており、既にGameObject上に存在しているコンポーネントに対する設定変更はサポートされていません。
これは、将来のバージョンで追加された機能が、既存のコンポーネントの設定内容と互換性がない可能性があるためです。&lt;/p>
&lt;p>例えば、v1.8.0で追加された&lt;code>AAO Remove Mesh By Box&lt;/code>コンポーネントの反転オプションを有効にすると、設定される箱による効果が変わってしまい、v1.7以前のみを想定して作成されているツールと互換性がなくなってしまいます。&lt;/p>
&lt;/blockquote></description></item><item><title>アセットの配布について</title><link>https://vpm.anatawa12.com/avatar-optimizer/ja/docs/developers/distributing-prefabs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vpm.anatawa12.com/avatar-optimizer/ja/docs/developers/distributing-prefabs/</guid><description>&lt;h1 id="distributing-prefabs">
 アセットの配布について
 &lt;a class="anchor" href="#distributing-prefabs">#&lt;/a>
&lt;/h1>
&lt;p>Avatar Optimizerは配布したいアセットを軽量化したり最適化したりするのに役立つかもしれません。
Avatar Optimizerに依存するアセットを配布する際の推奨事項をいくつか示します。&lt;/p>
&lt;h2 id="guide-to-the-official-distribution">
 ユーザーをAvatar Optimizer公式の配布場所に誘導する
 &lt;a class="anchor" href="#guide-to-the-official-distribution">#&lt;/a>
&lt;/h2>
&lt;p>Avatar OptimizerはMITライセンスの下で公開されているため、再配布することが認められています。
それでも、Avatar Optimizer公式の配布場所にユーザーを誘導することを強くお勧めします。&lt;br>
非公式に配布されるAvatar Optimizerはバージョンが古い可能性があります。
古いバージョンのAvatar Optimizerを使用していると、公式版では既に修正されているバグに遭遇するかもしれません。
また、Avatar Optimizerは前方互換性を保証していないため、新しいバージョンから古いバージョンにダウングレードさせてしまうと、そのユーザーの環境で何らかの問題が発生する可能性があります。&lt;/p>
&lt;p>ユーザーをAvatar Optimizer公式の配布場所に誘導する際に推奨される方法は以下の通りです。&lt;/p>
&lt;ol>
&lt;li>VPMでアセットを配布する場合は、Avatar OptimizerをVPMからインストールするように指示してください。&lt;br>
VPMで配布するアセットの&lt;code>package.json&lt;/code>でAvatar Optimizerを依存関係として宣言し、
Avatar OptimizerのVPMリポジトリをALCOMまたはVCCに追加するようにユーザーを誘導してください。
&lt;a href="https://vpm.anatawa12.com/add-repo">こちら&lt;/a>はAvatar Optimizerの公式リポジトリをALCOMまたはVCCに追加するためのリンクです。&lt;br>
また、配布するアセットと同じVPMリポジトリに&lt;a href="https://vpm.anatawa12.com/vpm.json">Avatar Optimizerの公式リポジトリ&lt;/a>をミラーしても構いません。
ミラーする場合は、GitHubのReleasesからミラーするのではなく、VPMリポジトリ自体をミラーしてください。&lt;/li>
&lt;li>Avatar Optimizerの公式ドキュメントへのリンクを提供してください。&lt;br>
&lt;a href="https://vpm.anatawa12.com/avatar-optimizer/ja/#installation">こちら&lt;/a>はAvatar Optimizer公式のインストールガイドです。
このガイドは、Avatar Optimizerを推奨される方法でインストールするようにユーザーを誘導します。&lt;/li>
&lt;li>&lt;a href="https://anatawa12.booth.pm/items/4885109">Avatar OptimizerのBoothページ&lt;/a>へのリンクを提供してください。&lt;br>
BoothページはAvatar Optimizer公式の配布場所の1つです。
Boothでは、最新バージョンのVPAIインストーラーunitypackageが含まれています。&lt;/li>
&lt;li>VPAIインストーラーunitypackageを同梱し、そのunitypackageをインポートするように指示してください。&lt;br>
VPAIインストーラーは、Avatar OptimizerのようなVPMパッケージを、unitypackageをインポートするだけでインストールするためのツールです。
Avatar Optimizer 1.x.x用のVPAIインストーラーunitypackageをダウンロードするためのリンクは&lt;a href="https://api.anatawa12.com/create-vpai/?name=AvatarOptimizer-%7b%7d-installer.unitypackage&amp;amp;repo=https://vpm.anatawa12.com/vpm.json&amp;amp;package=com.anatawa12.avatar-optimizer&amp;amp;version=1.x.x">こちら&lt;/a>です。&lt;/li>
&lt;/ol></description></item><item><title>コンポーネントにAvatar Optimizerとの互換性をもたせる</title><link>https://vpm.anatawa12.com/avatar-optimizer/ja/docs/developers/make-your-components-compatible-with-aao/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vpm.anatawa12.com/avatar-optimizer/ja/docs/developers/make-your-components-compatible-with-aao/</guid><description>&lt;h1 id="コンポーネントにavatar-optimizerとの互換性をもたせる">
 コンポーネントにAvatar Optimizerとの互換性をもたせる
 &lt;a class="anchor" href="#%e3%82%b3%e3%83%b3%e3%83%9d%e3%83%bc%e3%83%8d%e3%83%b3%e3%83%88%e3%81%abavatar-optimizer%e3%81%a8%e3%81%ae%e4%ba%92%e6%8f%9b%e6%80%a7%e3%82%92%e3%82%82%e3%81%9f%e3%81%9b%e3%82%8b">#&lt;/a>
&lt;/h1>
&lt;p>このページでは以下の2つのことを説明します。&lt;/p>
&lt;ul>
&lt;li>コンポーネントはどのような場合にAvatar Optimizerと非互換になるか&lt;/li>
&lt;li>どのように互換性を改善するか&lt;/li>
&lt;/ul>
&lt;p>もし質問があれば、お気軽に&lt;a href="https://misskey.niri.la/@anatawa12">Fediverse (Misskey / Mastodon)&lt;/a>や&lt;a href="https://discord.gg/dV4cVpewmM">NDMF Discord&lt;/a>でご連絡ください。&lt;/p>
&lt;h2 id="when-incompatible">
 コンポーネントはどのような場合にAvatar Optimizerと非互換になるか
 &lt;a class="anchor" href="#when-incompatible">#&lt;/a>
&lt;/h2>
&lt;p>Avatar Optimizerが処理する時点でアバターにコンポーネントが存在している場合、そのコンポーネントはAvatar Optimizerと互換性が無い可能性があります。&lt;/p>
&lt;p>Avatar Optimizerはビルド処理の最後の方で動作するように設計されているため、Avatar Optimizerにとって未知のコンポーネントについてはサポートしていません。&lt;/p>
&lt;p>例えば、Avatar Optimizerはコンポーネント等に対するガベージコレクションシステムを実装しています。
使用されているコンポーネントを保持し、未使用のコンポーネントを適切に削除するためには、
最適化時にアバターに存在するすべてのコンポーネントのことを知っておく必要があります。&lt;/p>
&lt;p>未知のコンポーネントによる問題を避けるため、Avatar Optimizerは未知のコンポーネントが以下のようなものであると仮定します。&lt;/p>
&lt;ul>
&lt;li>コンポーネントが有効かつアクティブになる可能性がある場合は保持される必要がある。
&lt;ul>
&lt;li>これは、未知のコンポーネントが実行時(VRChat上など)に動作するコンポーネントであると仮定しているためです。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>コンポーネントが参照している全てのコンポーネントに依存している。&lt;/li>
&lt;/ul>
&lt;p>(上記の仮定は将来的に変更される可能性があります。)&lt;/p>
&lt;p>しかしながら、これらの仮定は正しくない可能性があるため、Avatar Optimizerは以下のような警告を生成します。&lt;/p>
&lt;p>&lt;img src="unknown-component-warning.png" alt="unknown-component-warning" />&lt;/p>
&lt;h2 id="improve-compatibility">
 どのように互換性を改善するか
 &lt;a class="anchor" href="#improve-compatibility">#&lt;/a>
&lt;/h2>
&lt;p>以下の対応のいずれかを行うことで、互換性を改善することができます。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Avatar Optimizerが処理する前にコンポーネントを削除する&lt;/p>
&lt;p>コンポーネントが実行時では動作しないものである場合、(すなわち、ビルド時や編集モードでのみ動作するコンポーネントである場合、)
Avatar Optimizerより前にアバターを処理し、コンポーネントを削除することが殆どの場合で最善です。&lt;/p>
&lt;p>詳細は&lt;a href="#remove-component">下のセクション&lt;/a>を参照してください。&lt;/p>
&lt;p>Avatar Optimizerは、Trace and Optimizeの前に処理を行う殆どのAvatar Optimizerコンポーネントにおいて、内部的にこの方法を使用しています。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>APIを使用してAvatar Optimizerにコンポーネントを登録する&lt;/p>
&lt;p>実行時に動作するコンポーネントや、Avatar Optimizerより後にアバターを処理するために残しておく必要があるコンポーネントの場合、
そのコンポーネントの情報をAvatar Optimizerに登録することができます。&lt;/p>
&lt;p>詳細は&lt;a href="#register-component">下のセクション&lt;/a>を参照してください。&lt;/p>
&lt;p>Avatar Optimizerは、Trace and Optimizeの後に処理を行う一部のコンポーネントや、Unity純正のコンポーネント、VRCSDKのコンポーネントなどを保持するために、内部的にこの方法を使用しています。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Asset Descriptionを使用して、削除しても問題のないコンポーネントとしてAvatar Optimizerに登録する&lt;/p>
&lt;p>Avatar Optimizer v1.7.0以降では、実行時やビルド時で処理を行わないコンポーネント向けに&lt;a href="../asset-description">Asset Description&lt;/a>が追加されています。
ツールが実行時やビルド時に何も行わない場合は、「Avatar Optimizerが処理する前にコンポーネントを削除する」代わりにこの方法を使用してコンポーネントを登録することができます。&lt;/p></description></item></channel></rss>