<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>開発者向け on Avatar Optimizer (1.7.6-beta.1)</title><link>https://vpm.anatawa12.com/avatar-optimizer/beta/ja/docs/developers/</link><description>Recent content in 開発者向け on Avatar Optimizer (1.7.6-beta.1)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://vpm.anatawa12.com/avatar-optimizer/beta/ja/docs/developers/index.xml" rel="self" type="application/rss+xml"/><item><title>Asset Description</title><link>https://vpm.anatawa12.com/avatar-optimizer/beta/ja/docs/developers/asset-description/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vpm.anatawa12.com/avatar-optimizer/beta/ja/docs/developers/asset-description/</guid><description>Asset Description # Asset DescriptionはAvatar Optimizerにアセットの情報を提供するためのファイルです。
なぜAsset Descriptionが必要なのか # アバター上の不要な要素を削除するために、Avatar Optimizerはアバターに存在するすべてのコンポーネントのことを知る必要があります。
Avatar Optimizer v1.6.0でコンポーネントにAAOとの互換性をもたせるためのドキュメントとAPIが追加されましたが、 非破壊ツールでなく、ビルド時に処理を行わないようなツールでは、IVRCSDKPreprocessAvatarCallbackでコンポーネントを削除するのは少し面倒だろうと考えました。
そのため、Avatar Optimizerに無視してほしい、ビルド時やランタイムで処理を行わないコンポーネントを指定するためのシンプルな仕組みとして、Asset Descriptionがv1.7.0で追加されました。
なお、非破壊ツールの場合については、正しくない実行順で処理が行われた場合に、Avatar Optimizerがコンポーネントを誤って削除してしまわないように、従来通りIVRCSDKPreprocessAvatarCallbackでコンポーネントを削除することを推奨します。
Asset Descriptionの作成 # Asset Descriptionを作成するには、Projectウィンドウの右クリックメニューからCreate/Avatar Optimizer/Asset Descriptionを選択してください。
Avatar Optimizerはすべてのファイルの中からファイル検索を行うため、Asset Descriptionの名前、場所は自由です。
Asset Descriptionの編集 # Comment # コメント欄はメモを書くためにご自由にお使いください。 Avatar Optimizerはコメントを無視します。
Meaningless Components # Meaningless ComponentsはAvatar Optimizerに無視してほしいコンポーネントの型の一覧です。 コンポーネントのScript Assetを指定してください。 指定されたScript Assetの型のコンポーネントと、そのサブクラスのコンポーネントはAvatar Optimizerに無視されます。
Asset Descriptionでは実際のScene上のコンポーネントと同様に、Script AssetがguidとfileIDの形で保持されています。 そのため、クラス名を変更したとしても、シーン上のコンポーネントが壊れていない限り、Asset Descriptionでの指定も問題なく機能します。</description></item><item><title>Component Scripting API</title><link>https://vpm.anatawa12.com/avatar-optimizer/beta/ja/docs/developers/component-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vpm.anatawa12.com/avatar-optimizer/beta/ja/docs/developers/component-api/</guid><description>Component Scripting API # Avatar Optimizer v1.7.0以降、アバターにAvatar Optimizerのコンポーネントを追加・設定するためのComponent APIを提供しています。 このAPIを使用することで、Avatar Optimizerのコンポーネントを追加するツールやコンポーネントを作成することができます。
Component APIが利用可能なコンポーネント # 現時点では、すべてのコンポーネントがComponent APIで利用出来るわけではありません。 Component APIが利用可能なコンポーネントの一覧は以下の通りです。
RemoveMeshInBox - コンポーネントの追加と設定変更がサポートされています RemoveMeshByBlendShape - コンポーネントの追加と設定変更がサポートされています TraceAndOptimize - デフォルト設定での追加はサポートされていますが、設定変更はサポートされていません 将来のバージョンで追加されるデフォルトで有効な機能との互換性を保つために、コンポーネントの設定変更を行う場合には注意が必要です。 詳細については以下のドキュメントを参照してください。
はじめに # Component APIを使用するには、assembly definitionファイルでcom.anatawa12.avatar-optimizer.runtimeを参照する必要があります。 Avatar Optimizerはランタイムで動作しないため、ランタイムビルド向けでcom.anatawa12.avatar-optimizer.runtimeに依存してはいけません。
com.anatawa12.avatar-optimizer.runtimeにあるいくつかのクラスは、将来のバージョンでランタイム向けビルドから除外される可能性があります。 言い換えると、ランタイム向けのアセンブリでcom.anatawa12.avatar-optimizer.runtimeを使用するのは避けることをお勧めします。エディタ向けのアセンブリでのみ使用するようにしてください。
次に、コンポーネントの設定を変更する場合は、将来のバージョンで追加される機能との互換性を確保するためにvoid Initialize(int version)メソッドを呼び出す必要があります。 (動作の安定性で説明されているように、)デフォルト設定は変更される可能性があります。
デフォルト設定は、GameObject.AddComponent&amp;lt;T&amp;gt;()メソッドで追加されるコンポーネントに影響します。 従って、Avatar Optimizerの将来のバージョンとの互換性を保つためには、使用するデフォルト設定のバージョンを指定してInitializeメソッドを呼び出す必要があります。 デフォルト設定のバージョンは、Initializeメソッドのドキュメントに記載されているはずです。
Initializeメソッドを呼び出さなかった場合、コンポーネントが予期しない動作をしたり、将来的にエラーが発生したりする可能性があります。</description></item><item><title>アセットの配布について</title><link>https://vpm.anatawa12.com/avatar-optimizer/beta/ja/docs/developers/distributing-prefabs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vpm.anatawa12.com/avatar-optimizer/beta/ja/docs/developers/distributing-prefabs/</guid><description> アセットの配布について # Avatar Optimizerは配布したいアセットを軽量化したり最適化したりするのに役立つかもしれません。 Avatar Optimizerに依存するアセットを配布する際の推奨事項をいくつか示します。
ユーザーをAvatar Optimizer公式の配布場所に誘導する # Avatar OptimizerはMITライセンスの下で公開されているため、再配布することが認められています。 それでも、Avatar Optimizer公式の配布場所にユーザーを誘導することを強くお勧めします。
非公式に配布されるAvatar Optimizerはバージョンが古い可能性があります。 古いバージョンのAvatar Optimizerを使用していると、公式版では既に修正されているバグに遭遇するかもしれません。 また、Avatar Optimizerは前方互換性を保証していないため、新しいバージョンから古いバージョンにダウングレードさせてしまうと、そのユーザーの環境で何らかの問題が発生する可能性があります。
ユーザーをAvatar Optimizer公式の配布場所に誘導する際に推奨される方法は以下の通りです。
VPMでアセットを配布する場合は、Avatar OptimizerをVPMからインストールするように指示してください。
VPMで配布するアセットのpackage.jsonでAvatar Optimizerを依存関係として宣言し、 Avatar OptimizerのVPMリポジトリをVCCに追加するようにユーザーを誘導してください。 こちらはAvatar Optimizerの公式リポジトリをVCCに追加するためのリンクです。
また、配布するアセットと同じVPMリポジトリにAvatar Optimizerの公式リポジトリをミラーしても構いません。 ミラーする場合は、GitHubのReleasesからミラーするのではなく、VPMリポジトリ自体をミラーしてください。 Avatar Optimizerの公式ドキュメントへのリンクを提供してください。
こちらはAvatar Optimizer公式のインストールガイドです。 このガイドは、Avatar Optimizerを推奨される方法でインストールするようにユーザーを誘導します。 Avatar OptimizerのBoothページへのリンクを提供してください。
BoothページはAvatar Optimizer公式の配布場所の1つです。 Boothでは、最新バージョンのVPAIインストーラーunitypackageが含まれています。 VPAIインストーラーunitypackageを同梱し、そのunitypackageをインポートするように指示してください。
VPAIインストーラーは、Avatar OptimizerのようなVPMパッケージを、unitypackageをインポートするだけでインストールするためのツールです。 Avatar Optimizer 1.x.x用のVPAIインストーラーunitypackageをダウンロードするためのリンクはこちらです。</description></item><item><title>コンポーネントにAvatar Optimizerとの互換性をもたせる</title><link>https://vpm.anatawa12.com/avatar-optimizer/beta/ja/docs/developers/make-your-components-compatible-with-aao/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vpm.anatawa12.com/avatar-optimizer/beta/ja/docs/developers/make-your-components-compatible-with-aao/</guid><description>コンポーネントにAvatar Optimizerとの互換性をもたせる # このページでは以下の2つのことを説明します。
コンポーネントはどのような場合にAvatar Optimizerと非互換になるか どのように互換性を改善するか もし質問があれば、お気軽にfediverseで@anatawa12@misskey.niri.laにご連絡ください。
コンポーネントはどのような場合にAvatar Optimizerと非互換になるか # Avatar Optimizerが処理する時点でアバターにコンポーネントが存在している場合、そのコンポーネントはAvatar Optimizerと互換性が無い可能性があります。
Avatar Optimizerはコンポーネント等に対するガベージコレクションシステムを実装しているため、最適化時にアバターに存在するすべてのコンポーネントのことを知る必要があります。
未知のコンポーネントによる問題を避けるため、Avatar Optimizerは未知のコンポーネントが以下のようなものであると仮定します。(この仮定は将来的に変更される可能性があります。)
副作用のあるコンポーネントである。 コンポーネントが参照している全てのコンポーネントに依存している。 この仮定は正しくない可能性があるため、Avatar Optimizerは未知のコンポーネントを見つけた場合に以下のような警告を生成します。
どのように互換性を改善するか # Avatar Optimizerが処理する前にコンポーネントを削除出来る場合は、そのようにしてください。 削除出来ない場合はAvatar Optimizerにコンポーネントを登録してください。
Avatar Optimizer v1.7.0以降では、ビルド時やランタイムで処理を行わないコンポーネント向けにAsset Descriptionが追加されています。 ビルド時に処理を行わないようなツールであれば、こちらを利用して登録することもできます。
ビルド時に何らかの処理を行うツールやコンポーネントの場合は、Asset Descriptionで登録するのは非推奨です。 これは、Asset Descriptionによる登録では、ビルド時の処理順が意図しないものになってしまった場合などにAvatar Optimizerがコンポーネントを削除してしまうことにより、ツールが正しく動作出来なくなる可能性があるためです。
コンポーネントを削除する # コンポーネントを削除する方法はいくつかあります。
ツールがNDMF1を使用した非破壊ツールの場合は、NDMFのOptimizing phaseより前、 またはOptimizing phaseの中で(BeforePluginを用いて)com.anatawa12.avatar-optimizer plugin より前にコンポーネントを削除することを推奨します。
ツールがNDMF1を使用していない非破壊ツールの場合は、NDMFのOptimizing phaseより前にコンポーネントを削除することを推奨します。 この場合、現在のNDMFはVRCSDKのRemoveAvatarEditorOnlyの直前であるorder -1025でOptimizing phaseを実行するので、 それより小さいcallbackOrderを指定したIVRCSDKPreprocessAvatarCallbackでコンポーネントを削除してください。
ツールのコンポーネントがデータを保持する役割しかなく、ビルド時には意味を持っていない場合、 IVRCSDKPreprocessAvatarCallbackを用いてAvatar Optimizerが処理する前にコンポーネントを削除することを推奨します。 IVRCSDKPreprocessAvatarCallbackの順序については上記を参照してください。
コンポーネントを登録する # ツールのコンポーネントをAvatar Optimizerの処理より後に残しておきたい場合、 Avatar Optimizerにコンポーネントの情報を登録できます。
まず、Avatar OptimizerのAPIを呼び出すために、assembly definitionファイル2を(存在しない場合)作成してください。
次に、asmdefファイルのアセンブリ参照にcom.anatawa12.avatar-optimizer.api.editorを追加してください。
ツールをAvatar Optimizerに依存させたくない場合、Version Definesを使用してください。 Avatar Optimizer 1.</description></item></channel></rss>