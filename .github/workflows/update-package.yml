on:
  repository_dispatch:
    types: [update-package]
  workflow_call:
    inputs:
      repostitory:
        description: 'Name of source repository'
        default: ${{ github.repository }}
        required: true
        type: string
      version:
        description: 'Name of version'
        required: true
        type: string
    secrets:
      TOKEN:
        required: true

jobs:
  publish-vpm:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      GH_TOKEN: ${{ secrets.TOKEN || github.token }}
      SRC_REPO: ${{ inputs.repostitory || github.event.client_payload.repository }}
      VERSION: ${{ inputs.version || github.event.client_payload.version }}
    steps:
      - uses: actions/checkout@v3
        with:
          repository: anatawa12/vpm.anatawa12.com
          token: ${{ secrets.TOKEN || github.token }}
          ref: master
      - uses: snow-actions/git-config-user@v1.0.0

      - name: download package.json
        run: curl -sLf "https://github.com/$REPO/releases/download/v$VERSION/package.json" > package.json

      - name: verify version name
        run: |
          if ! [[ ${VERSION} =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)(-(alpha|beta|rc)\.[0-9]+)?$ ]]; then
            echo "version name is not valid. must be x.y.z OR x.y.z-(alpha|beta|rc).w" >&2
            exit 1
          fi
          if [ "$(jq -r '.version' < package.json)" != "${VERSION}" ]; then
            echo "version name mismatch between package.json and tag name" >&2
          fi

      - name: create and verify zip file url
        run: |
          ID="$(jq -r '.name' < package.json)"
          SHORTID="$(echo "$ID" | sed -e 's/^com\.anatawa12\.//')"

          DOWNLOAD_URL="https://vpm.anatawa12.com/$SHORTID/package-$VERSION.zip?"

          if ! curl -ILsSf "$DOWNLOAD_URL.1" -o /dev/null; then
            echo "downloading file from vpm.anatawa12.com failed" >&2
          fi

          echo "DOWNLOAD_URL=$DOWNLOAD_URL" >> $GITHUB_ENV
          echo "ID=$ID" >> $GITHUB_ENV
          echo "SHORTID=$SHORTID" >> $GITHUB_ENV

      - name: update vpm.json
        run: |
          jq \
            --arg DOWNLOAD_URL "$DOWNLOAD_URL" \
            --slurpfile package 'package.json' \
            '.packages[$package[0].name].versions[$package[0].version] = ($package[0] | .url = $DOWNLOAD_URL)' \
            < vpm.json > vpm.tmp.json
          rm vpm.json
          mv vpm.tmp.json vpm.json

      - name: Clear package.json
        run: |
          rm package.json

      - name: Commit changes
        run: |
          git add vpm.json
          git commit -m "add $SHORTID version $VERSION"

      - name: Push changes
        timeout-minutes: 2
        run: |
          while true; do
            git push && break
            sleep 3
            git pull --rebase
          done
